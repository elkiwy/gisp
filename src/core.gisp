;;;=Gisp Core: Utilities

;;;~Subdivide a collection in groups of n elements incrementing by step
;;;#Sequence
;;;!1Number
;;;!2Number
;;;!3Collection
(defn partition (n step coll)
    (if (> n (count coll))
        nil
        (insert (partition n step (drop step coll)) (take n 0 coll) )))

;;;~Flatten nested collections into a single flat one
;;;#Collection
;;;!1Collection
(defn flatten (l)
    (cond 
        (nil? l)
            nil
        (pair? (car l))
            (concat (flatten (car l)) (flatten (cdr l)))
        :else
            (cons (car l) (flatten (cdr l)))))





;;;=Gisp Core: Points

(def PI 3.14159265)

;;;~Creates a Point with absolutes coordinates.
;;;#Point
;;;!1Number
;;;!2Number
(defn point (x y)
	{ :x x :y y })

;;;~Creates a Vec structure with length len and direction dir in radians.
;;;#Vec
;;;!1Number
;;;!2Number
(defn vec (len dir)
	{ :len len :dir dir})

;;;~Calculate the distance between two Points.
;;;#Number
;;;!1Point
;;;!2Point
(defn point-distance (a b)
	(let (a2 (pow (- (:x b) (:x a)) 2)
		  b2 (pow (- (:y b) (:y a)) 2))
		(sqrt (+ a2 b2))))

;;;~Calculate the angle between two Points.
;;;#Number
;;;!1Point
;;;!2Point
(defn point-angle (a b)
    (atan2 (- (* -1 (:y b)) (* -1 (:y a))) (- (:x b) (:x a))))
	
;;;~Creates a new intermediate point between two Points pos is a floating number between 0 and 1 that defines. The distance between the two points. 0 returns point a,1 returns point b, 0.5 returns the middle point between a and b, etc...
;;;#Point
;;;!1Point
;;;!2Point
;;;!3Number
(defn point-between (a b pos)
    (point 
        (+ (:x a) (* pos (- (:x b) (:x a))))
        (+ (:y a) (* pos (- (:y b) (:y a))))))

;;;~Creates a new Point which is moved by a certain ammount in a certain direction defined by a Vector structure.
;;;#Point
;;;!1Point
;;;!2Vec
(defn point-move-by-vector (p vect)
    (point 
        (+ (:x p) (* (:len vect) (cos (:dir vect))))
        (+ (:y p) (* -1 (:len vect) (sin (:dir vect))))))

;;;~Draw a point on the screen
;;;#void
;;;!1Point
(defn draw-point (p)
    (if (not-nil? p)
        (draw-circle c p 3)
        nil))
    
;;;~Draw a points on the screen
;;;#void
;;;!1PointList
(defn draw-points (points)    
    (doseq (p points) 
        (draw-point p)))


















;;;=Gisp Code: Lines

;;;~Creates a Line joining points.
;;;#Line
;;;!1Point
;;;!2Point
(defn line (a b)
    {:a a :b b})

;;;~Get the slope of a line.
;;;#Number
;;;!1Line
(defn line-slope (l)
    (if (= 0 (- (:x (:a l)) (:x (:b l))) )
        nil
        (/ (- (:y (:a l)) (:y (:b l))) (- (:x (:a l)) (:x (:b l))))) )

;;;~Get the intersection point between two lines, uses infinite lines.
;;;#Point
;;;!1Line
;;;!2Line
(defn line-intersection (l1 l2)
    (let (a1 (:a l1)
          b1 (:b l1)
          a2 (:a l2)
          b2 (:b l2)
          slope1 (line-slope l1)
          slope2 (line-slope l2))
      (cond 
        (= slope1 slope2)
            nil
        (and (nil? slope1) (not-nil? slope2))
            (point (:x a1)
                   (+ (* (- (:x a1) (:x a2)) slope2) (:y a2)))
        (and (not-nil? slope1) (nil? slope2))
            (point (:x a2)
                   (+ (* (- (:x a2) (:x a1)) slope1) (:y a1)))
        :else
            (let (A (- (* slope1 (:x a1)) (* slope2 (:x a2)))
                  B (- (+ A (:y a2)) (:y a1))
                  x (/ B (- slope1 slope2)))
                (point x (+ (* slope2 (- x (:x a2))) (:y a2)))))))





;;;~Checks if a point is on a line
;;;#Boolean
;;;!1Point
;;;!2Line
(defn point-on-line? (point line)
	(let (ac (point-distance point (:a line))
		  bc (point-distance point (:b line))
		  ab (point-distance (:a line) (:b line))
		  diff (abs (- (+ ac bc) ab)))
		(< diff 0.00001)))
		


;;;~Get the intersection point between two lines, returns nil if l1 and l2 doesn't intersects.
;;;#Point
;;;!1Line
;;;!2Line
(defn segment-intersection (l1 l2)
    (let (crossing (line-intersection l1 l2))
		(cond
			(nil? crossing)
				nil
			(and (point-on-line? crossing l1) (point-on-line? crossing l2))
				crossing
			:else 
				nil)))

    
;;;~Get the position of a point to a line. Returns 1, -1 or 0.
;;;#Number
;;;!1Point
;;;!2Line
(defn point-position-respect-line (p l)
    (let (aaa (* (- (:x (:b l)) (:x (:a l))) (- (:y p) (:y (:a l))))
          bbb (* (- (:y (:b l)) (:y (:a l))) (- (:x p) (:x (:a l))))
          ccc (- aaa bbb))
        (sign ccc)))

;;;~Sort a Point list of a Shape around its centroid.
;;;#Shape
;;;!1Shape
(defn points-sort-clockwise-around-centroid (points)
    (if (<= (count points) 0)
        nil
        (let (cent    (shape-centroid points)
              ordered (sort (lambda (a b) (> (point-angle cent a) (point-angle cent b))) points))
            ordered)))























;;;=Gisp Code: Circles

;;;~Draw a set of circles on the screen.
;;;#void
;;;!1PointList
;;;!2Number
(defn draw-circles (points r)    
    (doseq (p points) 
        (draw-circle c p r)))
    




















;;;=Gisp Code: Shapes

;;;~Draws a regular shape into the context.
;;;#void
;;;!1Context
;;;!2Point
;;;!3Number
;;;!4Number
;;;!5Number
(defn reg-shape (context center side-n size angle)
	(let (cx   (:x center)
		  cy   (:y center)
		  step (/ (* PI 2) side-n)
		  angles (map #(+ (* % step) (rad angle)) (range side-n))
		  points (map #(point-move-by-vector center (vec size %)) angles))
		(doseq (i (range (- side-n 1)))
			(line context (get points i) (get points (+ i 1))))
		(line context (last points) (first points))))

;;;~Draw a shape on the screen.
;;;#void
;;;!1PointList
(defn draw-shape (points)
	(if (nil? points)
		nil
		(progn 
			(doseq (i (range 1 (count points)))
				(draw-line c (get points (- i 1)) (get points i)) )
			(draw-line c (last points) (first points)) )))
    
;;;~Draw a set of shapes on the screen.
;;;#void
;;;!1ShapeList
(defn draw-shapes (shapes)    
    (doseq (shape shapes) 
        (draw-shape shape)))

;;;~Calculate the centroid of the shape.
;;;#Point
;;;!1Shape
(defn shape-centroid (points)
    (let (sum-x (reduce + 0 (map #(:x %) points))
          sum-y (reduce + 0 (map #(:y %) points))
          length (count points))
        (point (/ sum-x length) (/ sum-y length))))

;;;~Move a shape by a vector.
;;;#Shape
;;;!1Shape
;;;!2Vec
(defn shape-move-by-vector (shape vect)
    (mapv #(point-move-by-vector % vect) shape))
    




