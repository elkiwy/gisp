;;;=Gisp Core: Utilities

;;;~Subdivide a sequence in groups of n elements incrementing by step
;;;#Sequence
;;;!1Number
;;;!2Number
;;;!3Sequence
(defn partition (n step seq)
    (if (> n (count seq))
        nil
        (insert (partition n step (drop step seq)) (take n 0 seq) )))

;;;~Flatten nested sequence into a single flat one
;;;#Sequence
;;;!1Sequence
(defn flatten (l)
    (cond 
        (nil? l)
            nil
        (pair? (car l))
            (concat (flatten (car l)) (flatten (cdr l)))
        :else
            (cons (car l) (flatten (cdr l)))))

;;;~Replace the first and last elements of a sequence.
;;;#Sequence
;;;!1Sequence
;;;!2Any
;;;!3Any
(defn replace-first-and-last (seq newFirst newLast)
    (let (trimmed (take (- (count seq) 2) 1 seq))
         (insert (append trimmed newLast) newFirst)))




;;;=Gisp Core: Points

(def PI 3.14159265)

















;;;=Gisp Core: Lines

;;;~Get the slope of a line.
;;;#Number
;;;!1Line
(defn line-slope (l)
    (if (= 0 (- (point-x (line-a l)) (point-x (line-b l))) )
        nil
        (/ (- (point-y (line-a l)) (point-y (line-b l))) (- (point-x (line-a l)) (point-x (line-b l))))) )

;;;~Get the intersection point between two lines, uses infinite lines.
;;;#Point
;;;!1Line
;;;!2Line
(defn line-intersection (l1 l2)
    (let (a1 (line-a l1)
          b1 (line-b l1)
          a2 (line-a l2)
          b2 (line-b l2)
          slope1 (line-slope l1)
          slope2 (line-slope l2))
      (cond 
        (= slope1 slope2)
            nil
        (and (nil? slope1) (not-nil? slope2))
            (point (point-x a1)
                   (+ (* (- (point-x a1) (point-x a2)) slope2) (point-y a2)))
        (and (not-nil? slope1) (nil? slope2))
            (point (point-x a2)
                   (+ (* (- (point-x a2) (point-x a1)) slope1) (point-y a1)))
        :else
            (let (A (- (* slope1 (point-x a1)) (* slope2 (point-x a2)))
                  B (- (+ A (point-y a2)) (point-y a1))
                  x (/ B (- slope1 slope2)))
                (point x (+ (* slope2 (- x (point-x a2))) (point-y a2)))))))

;;;~Checks if a point is on a line
;;;#Boolean
;;;!1Point
;;;!2Line
(defn point-on-line? (point line)
    (let (ac (point-distance point (line-a line))
          bc (point-distance point (line-b line))
          ab (point-distance (line-a line) (line-b line))
          diff (abs (- (+ ac bc) ab)))
        (< diff 0.00001)))

;;;~Get the intersection point between two lines, returns nil if l1 and l2 doesn't intersects.
;;;#Point
;;;!1Line
;;;!2Line
(defn segment-intersection (l1 l2)
    (let (crossing (line-intersection l1 l2))
        (cond
            (nil? crossing)
                nil
            (and (point-on-line? crossing l1) (point-on-line? crossing l2))
                crossing
            :else 
                nil)))
    
;;;~Get the position of a point to a line. Returns 1, -1 or 0.
;;;#Number
;;;!1Point
;;;!2Line
(defn point-position-respect-line (p l)
    (let (aaa (* (- (point-x (line-b l)) (point-x (line-a l))) (- (point-y p) (point-y (line-a l))))
          bbb (* (- (point-y (line-b l)) (point-y (line-a l))) (- (point-x p) (point-x (line-a l))))
          ccc (- aaa bbb))
        (sign ccc)))

;;;~Sort a Point list of a Shape around its centroid.
;;;#Shape
;;;!1Shape
(defn points-sort-clockwise-around-centroid (points)
    (if (<= (count points) 0)
        nil
        (let (cent    (shape-centroid points)
              ordered (sort (lambda (a b) (> (point-angle cent a) (point-angle cent b))) points))
            ordered)))























;;;=Gisp Core: Circles

;;;~Draw a set of circles on the screen.
;;;#void
;;;!1PointList
;;;!2Number
(defn draw-circles (points r)    
    (doseq (p points) 
        (draw-circle c p r)))
    




















;;;=Gisp Core: Shapes


;;;~Creates a regular shape
;;;#Shape
;;;!1Point
;;;!2Number
;;;!3Number
;;;!4Number
(defn reg-shape (center side-n size angle)
    (let (cx   (point-x center) cy   (point-y center)
		  step (/ (* PI 2) side-n)
		  angles (map #(+ (* % step) (rad angle)) (range side-n))
		  points (map #(point-move-by-vector center (vec size %)) angles))
        points))

;;;~Draw a shape on the screen.
;;;#void
;;;!1PointList
(defn draw-shape (points)
    (if (nil? points)
        nil
        (progn 
            (doseq (i (range 1 (count points)))
                (draw-line c (get points (- i 1)) (get points i)) )
            (draw-line c (last points) (first points)) )))
    
;;;~Draw a set of shapes on the screen.
;;;#void
;;;!1ShapeList
(defn draw-shapes (shapes)    
    (doseq (shape shapes) 
        (draw-shape shape)))

;;;~Calculate the centroid of the shape.
;;;#Point
;;;!1Shape
(defn shape-centroid (points)
    (let (sum-x (reduce + 0 (map #(point-x %) points))
          sum-y (reduce + 0 (map #(point-y %) points))
          length (count points))
        (point (/ sum-x length) (/ sum-y length))))

;;;~Move a shape by a vector.
;;;#Shape
;;;!1Shape
;;;!2Vec
(defn shape-move-by-vector (shape vect)
    (mapv #(point-move-by-vector % vect) shape))
    












;;;=Gisp Core: Paths




;;;~Draw a list of Paths on the screen.
;;;#void
;;;!1PathList
(defn draw-paths (paths)
    (doseq (p paths)
        (draw-path p)))

;;;~Convert a line to a segmented path.
;;;#Path
;;;!1Line
;;;!2Number
(defn line-to-path (l n)
    (let (step (/ 1 n)
          cuts (map #(* step %) (range (+ n 1))))
        (mapv #(point-between (line-a l) (line-b l) %) cuts)))

;;;~Dispose randomly a path through its segments.
;;;#Path
;;;!1Path
;;;!2Number
;;;!3Number
(defn path-dispose (p noiseX noiseY)
    (mapv  #(point (gauss (point-x %) noiseX) (gauss (point-y %) noiseY)) p))

;;;~Subfunction of path-smooth
;;;#PointList
;;;!1Point
;;;!2Point
;;;!3Number
(defn chaikin-segment (a b chaikin-param)
    (let (lowMargin  chaikin-param 
          highMargin (- 1 lowMargin))
        (list (point-between a b lowMargin) (point-between a b highMargin))))

;;;~Approximate a Path with the chaikin subdivision algorythm, smoothing the original Path.
;;;!1Path
;;;!2Number
;;;!3Number
(defn path-smooth (path iteration chaikin-param)
    (if (> iteration 0)
        ;Recursive step
        (let (segmentationPoint (if (number? chaikin-param) chaikin-param (rand (first chaikin-param) (second chaikin-param)))
              linesList         (partition 2 1 path)
              newLineList       (map #(chaikin-segment (get % 0) (get % 1) segmentationPoint) linesList)
              curve             (path-smooth (to-vector (flatten newLineList)) (- iteration 1) chaikin-param))
            ;Keep the first and last point where they are
            (replace-first-and-last curve (first path) (last path)))
        ;When i completed all the iteration I just return the point list
        path))


